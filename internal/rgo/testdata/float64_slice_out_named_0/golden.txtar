-- R/float64_slice_out_named_0.R --
# Code generated by rgnonomic/rgo; DO NOT EDIT.

#' @useDynLib float64_slice_out_named_0

#' Test0
#'
#' Test0 does things with [] and returns [[]float64].
#' 
#' @return A double vector, res0
#' @seelso <https://godoc.org/float64_slice_out_named_0#Test0>
#' @export
test_0 <- function() {
	.Call("test_0", PACKAGE = "float64_slice_out_named_0")
}
-- src/Makevars --
# Code generated by rgnonomic/rgo; DO NOT EDIT.

.PHONY: all

CGO_CFLAGS = "$(ALL_CPPFLAGS)"
CGO_LDFLAGS = "$(PKG_LIBS) $(SHLIB_LIBADD) $(LIBR)"

all: go docs

docs:

go:
	rm -f *.h
	CGO_CFLAGS=$(CGO_CFLAGS) CGO_LDFLAGS=$(CGO_LDFLAGS) go build -o $(SHLIB) -buildmode=c-shared ./rgo
-- src/rgo/float64_slice_out_named_0.c --
// Code generated by rgnonomic/rgo; DO NOT EDIT.

#include "_cgo_export.h"

void R_warning(char* s) {
	warning(s);
}

void R_error(char* s) {
	error(s);
}

// TODO(kortschak): Only emit these when needed:
// Needed for unpacking SEXP character.
GoString R_gostring(SEXP x) {
	SEXP _s = STRING_ELT(x, 0);
	GoString s = {(char*)CHAR(_s), STDVEC_LENGTH(_s)};
	return s;
}

// Needed for getting list elements by name.
int getListElementIndex(SEXP list, const char *str) {
	int index = -1;
	SEXP names = getAttrib(list, R_NamesSymbol);
	for (int i = 0; i < length(list); i++) {
		if (strcmp(CHAR(STRING_ELT(names, i)), str) == 0) {
			index = i;
			break;
		}
	}
	return index;
}

SEXP test_0() {
	return Wrapped_Test0();
}
-- src/rgo/float64_slice_out_named_0.go --
// Code generated by rgnonomic/rgo; DO NOT EDIT.

package main

/*
#define USE_RINTERNALS
#include <R.h>
#include <Rinternals.h>
extern void R_error(char *s);

// TODO(kortschak): Only emit these when needed.
extern Rboolean Rf_isNull(SEXP s);
extern _GoString_ R_gostring(SEXP x);
*/
import "C"

import (
	"fmt"
	"unsafe"

	"float64_slice_out_named_0"
)


//export Wrapped_Test0
func Wrapped_Test0() C.SEXP {
	defer func() {
		r := recover()
		if r != nil {
			err := C.CString(fmt.Sprint(r))
			C.R_error(err)
			C.free(unsafe.Pointer(err))
		}
	}()

	_r0 := float64_slice_out_named_0.Test0()
	return packSEXP_Test0(_r0)
}

func packSEXP_Test0(res0 []float64) C.SEXP {
	return packSEXP_types_Slice___float64(res0)
}

func packSEXP_types_Basic_float64(p float64) C.SEXP {
	return C.ScalarReal(C.double(p))
}

func packSEXP_types_Slice___float64(p []float64) C.SEXP {
	r := C.Rf_allocVector(C.REALSXP, C.R_xlen_t(len(p)))
	C.Rf_protect(r)
	for i, v := range p {
		C.SET_VECTOR_ELT(r, C.R_xlen_t(i), packSEXP_types_Basic_float64(v))
	}
	C.Rf_unprotect(1)
	return r
}

func main() {}
