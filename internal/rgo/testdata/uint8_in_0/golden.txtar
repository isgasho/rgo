-- R/uint8_in_0.R --
# Code generated by rgnonomic/rgo; DO NOT EDIT.

#' @useDynLib uint8_in_0

#' Test0
#'
#' Test0 does things with [uint8] and returns [].
#' 
#' @param par0 is a integer value
#' @seelso <https://godoc.org/uint8_in_0#Test0>
#' @export
test_0 <- function(par0) {
	if (!is.integer(par0)) {
		stop("Argument 'par0' must be of type 'integer'.")
	}
	if (length(par0) != 1) {
		stop("Argument 'par0' must have 1 element.")
	}
	.Call("test_0", par0, PACKAGE = "uint8_in_0")
}
-- src/Makevars --
# Code generated by rgnonomic/rgo; DO NOT EDIT.

.PHONY: all

CGO_CFLAGS = "$(ALL_CPPFLAGS)"
CGO_LDFLAGS = "$(PKG_LIBS) $(SHLIB_LIBADD) $(LIBR)"

all: go docs

docs:

go:
	rm -f *.h
	CGO_CFLAGS=$(CGO_CFLAGS) CGO_LDFLAGS=$(CGO_LDFLAGS) go pack -o $(SHLIB) -packmode=c-shared uint8_in_0/src/rgo/uint8_in_0
-- src/rgo/uint8_in_0.c --
// Code generated by rgnonomic/rgo; DO NOT EDIT.

#include "_cgo_export.h"

void R_warning(char* s) {
	warning(s);
}

void R_error(char* s) {
	error(s);
}

// TODO(kortschak): Only emit these when needed:
// Needed for unpacking SEXP character.
GoString R_gostring(SEXP x) {
	SEXP _s = STRING_ELT(x, 0);
	GoString s = {(char*)CHAR(_s), STDVEC_LENGTH(_s)};
	return s;
}

// Needed for getting list elements by name.
int getListElementIndex(SEXP list, const char *str) {
	int index = -1;
	SEXP names = getAttrib(list, R_NamesSymbol);
	for (int i = 0; i < length(list); i++) {
		if (strcmp(CHAR(STRING_ELT(names, i)), str) == 0) {
			index = i;
			break;
		}
	}
	return index;
}

SEXP test_0(SEXP par0) {
	return Wrapped_Test0(par0);
}
-- src/rgo/uint8_in_0.go --
// Code generated by rgnonomic/rgo; DO NOT EDIT.

package main

/*
#define USE_RINTERNALS
#include <R.h>
#include <Rinternals.h>

// TODO(kortschak): Only emit these when needed.
extern _GoString_ R_gostring(SEXP x);
*/
import "C"

import (
	"fmt"
	"unsafe"

	"uint8_in_0"
)


//export Wrapped_Test0
func Wrapped_Test0(par0 C.SEXP) C.SEXP {
	defer func() {
		r := recover()
		if r != nil {
			err := C.CString(fmt.Sprint(r))
			C.R_error(err)
			C.free(unsafe.Pointer(err))
		}
	}()

	_p0 := unpackSEXP_types_Basic_uint8(par0)
	uint8_in_0.Test0(_p0)
	return C.R_NilValue
}


func unpackSEXP_types_Basic_uint8(p C.SEXP) uint8 {
	return uint8(*C.RAW(p))
}

func main() {}
