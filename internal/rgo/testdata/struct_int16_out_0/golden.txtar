-- R/struct_int16_out_0.R --
# Code generated by rgnonomic/rgo; DO NOT EDIT.

#' @useDynLib struct_int16_out_0

#' Test0
#'
#' Test0 does things with [] and returns [struct{F1 int16; F2 int16 "rgo:\"Rname\""}].
#' 
#' @return A list corresponding to struct{F1 int16; F2 int16 "rgo:\"Rname\""}
#' @seelso <https://godoc.org/struct_int16_out_0#Test0>
#' @export
test_0 <- function() {
	.Call("test_0", PACKAGE = "struct_int16_out_0")
}
-- src/Makevars --
# Code generated by rgnonomic/rgo; DO NOT EDIT.

.PHONY: all

CGO_CFLAGS = "$(ALL_CPPFLAGS)"
CGO_LDFLAGS = "$(PKG_LIBS) $(SHLIB_LIBADD) $(LIBR)"

all: go docs

docs:

go:
	rm -f *.h
	CGO_CFLAGS=$(CGO_CFLAGS) CGO_LDFLAGS=$(CGO_LDFLAGS) go pack -o $(SHLIB) -packmode=c-shared struct_int16_out_0/src/rgo/struct_int16_out_0
-- src/rgo/struct_int16_out_0.c --
// Code generated by rgnonomic/rgo; DO NOT EDIT.

#include "_cgo_export.h"

void R_warning(char* s) {
	warning(s);
}

void R_error(char* s) {
	error(s);
}

// TODO(kortschak): Only emit these when needed:
// Needed for unpacking SEXP character.
GoString R_gostring(SEXP x) {
	SEXP _s = STRING_ELT(x, 0);
	GoString s = {(char*)CHAR(_s), STDVEC_LENGTH(_s)};
	return s;
}

// Needed for getting list elements by name.
int getListElementIndex(SEXP list, const char *str) {
	int index = -1;
	SEXP names = getAttrib(list, R_NamesSymbol);
	for (int i = 0; i < length(list); i++) {
		if (strcmp(CHAR(STRING_ELT(names, i)), str) == 0) {
			index = i;
			break;
		}
	}
	return index;
}

SEXP test_0() {
	return Wrapped_Test0();
}
-- src/rgo/struct_int16_out_0.go --
// Code generated by rgnonomic/rgo; DO NOT EDIT.

package main

/*
#define USE_RINTERNALS
#include <R.h>
#include <Rinternals.h>

// TODO(kortschak): Only emit these when needed.
extern _GoString_ R_gostring(SEXP x);
*/
import "C"

import (
	"fmt"
	"unsafe"

	"struct_int16_out_0"
)


//export Wrapped_Test0
func Wrapped_Test0() C.SEXP {
	defer func() {
		r := recover()
		if r != nil {
			err := C.CString(fmt.Sprint(r))
			C.R_error(err)
			C.free(unsafe.Pointer(err))
		}
	}()

	_r0 := struct_int16_out_0.Test0()
	return packSEXP_Test0(_r0)
}

func packSEXP_Test0(p0 struct{F1 int16; F2 int16 "rgo:\"Rname\""}) C.SEXP {
	return packSEXP_types_Struct_struct_F1_int16__F2_int16__rgo___Rname____(p0)
}

func packSEXP_types_Basic_int16(p int16) C.SEXP {
	return C.ScalarInteger(C.int(p))
}

func packSEXP_types_Struct_struct_F1_int16__F2_int16__rgo___Rname____(p struct{F1 int16; F2 int16 "rgo:\"Rname\""}) C.SEXP {
	r := C.allocList(2)
	C.Rf_protect(r)
	arg := r
	listSEXPSet(arg, "F1", packSEXP_types_Basic_int16(p.F1))
	arg = C.CDR(arg)
	listSEXPSet(arg, "F2", packSEXP_types_Basic_int16(p.F2))
	C.Rf_unprotect(1)
	return r
}

func listSEXPSet(r C.SEXP, key string, val C.SEXP) {
	C.setAttrib(arg, packSEXP_types_Basic_string(key))
	C.SETCAR(arg, val)
}

func main() {}
